//C大数类
struct lint { int len; int size; int* v = NULL; };//length、size、value
#define lintminl 8
#define lintbase 100000000
#define lintchecksize(a, tsize) if ( (tsize) > (a)->size ||((tsize) >= lintminl && (tsize) * 2 <= (a)->size) )lintresetsize(a, tsize)
#define lintnewstatic(a) static struct lint *a = NULL; if (a != NULL)lintresetv(a); else lintnew(&a)
//lint_basic
void lintresetsize(struct lint *a, int size) {
	int i = lintminl; while (i < size)i *= 2; int sizenew = i;
	int *vtemp = NULL; while (vtemp == NULL)vtemp = (int*)malloc(sizeof(int)*sizenew); for (i = 0; i < sizenew; i++)vtemp[i] = 0;
	if (a->len > sizenew)a->len = sizenew; for (i = 0; i < a->len; i++)vtemp[i] = a->v[i];
	free(a->v); a->v = NULL; while (a->v == NULL)a->v = (int*)malloc(sizeof(int)*sizenew); a->size = sizenew;
	for (i = 0; i < sizenew; i++) a->v[i] = vtemp[i]; free(vtemp); vtemp = NULL; return;
}
void lintresetv(struct lint *a) {
	int i; for (i = 0; i < a->len; i++)a->v[i] = 0; a->len = 0; 
	return;
}
void lintnew(struct lint*a) {
	int size = lintminl;
	a->len = size; a->size = size; 
	a->v = NULL; while (a->v == NULL)a->v = (int*)malloc(sizeof(int)*size);
	lintresetv(a); return;
}
void lintnew(struct lint**ap) {
	*ap = NULL; while (*ap == NULL)*ap = (struct lint*)malloc(sizeof(struct lint));
	lintnew(*ap); return;
}
void lintdelete(struct lint *a) {
	free(a->v); a->v = NULL; return;
}
void lintdelete(struct lint **ap) {
	lintdelete(*ap);
	free(*ap);
	*ap = NULL;
	return;
}
void lintcopy(struct lint *a, struct lint *b) {
	lintchecksize(a, b->len);
	lintresetv(a);
	int i; for (i = 0; i < b->len; i++) a->v[i] = b->v[i]; a->len = b->len; 
	return;
}
int lintcmp(struct lint *a, struct lint *b) {
	//不支持负数
	if (a->len > b->len)return 1;
	if (a->len < b->len)return -1;
	int i = a->len;
	while (i--) {
		if (a->v[i] > b->v[i])return 1;
		if (a->v[i] < b->v[i])return -1;
	}
	return 0;
}
//lint_print
void lintprintf(struct lint *a) {
	int i, isfirst = 1;
	for (i = a->len - 1; i >= 0; i--)
		if (isfirst) {
			isfirst = 0; if (a->v[i])printf("%d", a->v[i]);
		}
		else printf("%08d", a->v[i]);
		if (isfirst)printf("0");
		printf("\n");
		return;
}
void lintsprintf(struct lint *a, char* temp0, int tempsize = -1) {
	int isfirst = 1, i; char* temp = temp0;
	if (tempsize != -1) {
		i = tempsize - 1;
		while (temp[i] == '\0'&&i >= 0)i--;
		temp += i + 1;
	}
	for (i = a->len - 1; i >= 0; i--) {
		if (isfirst) {
			if (a->v[i])temp += sprintf(temp, "%d", a->v[i]);
			isfirst = 0;
		}
		else temp += sprintf(temp, "%08d", a->v[i]);
		if (tempsize != -1 && temp - temp0 > tempsize - 8)return;
	}
		if (isfirst)temp+=sprintf(temp, "0");
		temp += sprintf(temp, "\n");
		return;
}
//lint_add
void linta(struct lint *a, struct lint *b) {
	int i = a->len, n = b->len, temp = 0, base = lintbase;
	if (i < n)i = n; lintchecksize(a, i + 1);
	i = 0; while (1) {
		if (i < n)temp += b->v[i]; if (i >= n&&temp == 0)break;
		temp += a->v[i];
		a->v[i] = temp%base; temp /= base;
		i++;
	}
	if (a->len < i)a->len = i;
	return;
}
void linta(struct lint *a, int num, int section = 0) {
	struct lint b; lintnew(&b);
	lintchecksize(&b, section + 1); b.v[section] = num; b.len = section + 1;
	linta(a, &b);
	return;
}
//lint_sub
void lints(struct lint *a, struct lint *b) {
	//不支持负数
	int i, n = a->len, temp = 0, base = lintbase;
	for (i = 0; i < n; i++) {
		temp += a->v[i];
		if (i < b->len)temp -= b->v[i];
		if (temp >= 0) { a->v[i] = temp; temp = 0; if (i >= b->len)break; }
		else { a->v[i] = temp + base; temp = -1; }
	}
	for (i = a->len - 1; i >= 0; i--)if (a->v[i] != 0)break; a->len = i + 1;
	lintchecksize(a, a->len);
	return;
}
void lints(struct lint *a, int num, int section = 0) {
	struct lint b; lintnew(&b);
	lintchecksize(&b, section + 1); b.v[section] = num; b.len = section + 1;
	lints(a, &b);
	return;
}
//lint_muti
void lintm0(struct lint *a, struct lint *b) {
	lintnewstatic(c); lintchecksize(c, a->len + b->len);
	int i, j; long long temp, temp2, base = lintbase;
	temp = 0;
	for (i = 0; i < c->size; i++) {
		for (j = 0; j <= i; j++) {
			temp2 = 1;
			if (j < a->len)temp2 *= a->v[j]; else continue;
			if (i - j < b->len)temp2 *= b->v[i - j]; else continue;
			temp += temp2;
		}
		c->v[i] = temp%base; temp /= base;
	}
	i = c->size - 1; while (c->v[i] == 0)i--; c->len = i + 1;
	lintcopy(a, c);
	return;
}
void lintm1div(struct lint*d, struct lint*s, int end, int start) {
	if (end > s->len)end = s->len;
	if (end <= start)return;
	lintchecksize(d, end - start);
	int i; for (i = start; i < end; i++)d->v[i - start] = s->v[i];
	d->len = end - start; while (d->len>0 && d->v[d->len - 1] == 0)d->len--;
	return;
}
void lintm1sum(struct lint *q, struct lint *p, struct lint *k, int n) {
	struct lint *re = NULL; lintnew(&re); int i;
	if (k->len) {
		lints(k, q); lints(k, p);
		lintchecksize(k, k->len + n);
		for (i = k->len - 1; i >= 0; i--) { k->v[i + n] = k->v[i]; k->v[i] = 0; }
		k->len += n;
		linta(re, k);
	}
	if (q->len) {
		lintchecksize(q, q->len + n * 2);
		for (i = q->len - 1; i >= 0; i--) { q->v[i + n * 2] = q->v[i]; q->v[i] = 0; }
		q->len += n * 2;
		linta(re, q);
	}
	linta(re, p);
	lintcopy(q, re);
	lintdelete(&re);
	return;
};
void lintm1(struct lint *x, struct lint *y) {
	if (x->len == 0 || y->len == 0) { 
		lintresetv(x); 
		return; 
	}
	if (x->len <= 100 && y->len <= 100) {
		lintm0(x, y); return;
	}
	int n = x->len; if (n < y->len)n = y->len; n = n / 2;
	struct lint *a = NULL, *b = NULL, *c = NULL, *d = NULL, *e = NULL, *f = NULL;
	lintnew(&a); lintnew(&b); lintnew(&c); lintnew(&d); lintnew(&e); lintnew(&f);
	lintm1div(a, x, x->len, n); lintm1div(b, x, n, 0); lintm1div(c, y, y->len, n); lintm1div(d, y, n, 0);
	lintcopy(e, a); linta(e, b); lintcopy(f, c); linta(f, d);
	lintm1(a, c); lintm1(b, d); lintm1(e, f);
	lintm1sum(a, b, e, n);
	lintcopy(x, a);
	lintdelete(&a); lintdelete(&b); lintdelete(&c); lintdelete(&d); lintdelete(&e); lintdelete(&f);
	return;
}
void lintm(struct lint *a, struct lint *b) {
	switch (2){
	case 1:lintm0(a, b); break;//原始竖式乘法 o(n^2)
	case 2:
		lintm1(a, b); break;//分治乘法 o(n^1.59)
	}
	return;
}
void lintm(struct lint *a, int num, int section = 0) {
	lintnewstatic(c); lintchecksize(c, section + 1);
	linta(c, num, section);
	lintm(a, c); return;
}
//lint_div
int lintd(struct lint *a, struct lint *b) {
	lintnewstatic(c); lintchecksize(c, a->len);
	lintnewstatic(d); lintchecksize(d, a->len);
	lintnewstatic(e); lintchecksize(e, a->len);
	int i;
	while (lintcmp(a, b) != -1) {
		lintresetv(d); linta(d, 1);
		while (1) {
			lintcopy(e, b); lintm(e, d); lintm(e, 10);
			if (lintcmp(a, e) == -1)break;
			lintm(d, 10);
		}
		i = 1;
		while (1) {
			lintcopy(e, b); lintm(e, d); lintm(e, i + 1);
			if (lintcmp(a, e) == -1)break;
			i++;
		}
		lintcopy(e, b); lintm(d, i); lintm(e, d); 
		linta(c, d); 
		lints(a, e); 
	}
	int re = 0;
	lintresetv(d);
	if (lintcmp(a, d) == 0)re = 0; else re = 1;
	i = c->len - 1; while (c->v[i] == 0 && i >= 0)i--; c->len = i + 1;
	lintcopy(a, c);
	return re;
}
void lintd(struct lint *a, int num, int section = 0) {
	lintnewstatic(c); lintchecksize(c, a->len);
	linta(c, num, section);
	lintd(a, c); return;
}
